#Дан список повторяющихся элементов. Вернуть список с дублирующимися элементами.
#В результирующем списке не должно быть дубликатов.

#Вариант 1
lst = [1, 2, 3, 3, 4, 4, 5, 6, 6]
result = []
for item in lst:
    if item not in result:
        result.append(item)
print(result)

#Вариант 2
lst = []
lst = [int(item) for item in input("Enter the list items : ").split()]
result = []
for item in lst:
    if item not in result:
        result.append(item)
print(result)

#Вариант 3
my_list = [11, 11, 2, 35, 3, 41, 5, 57, 7, 7, 9, 9]
unique_set = set()
for elem in my_list:
    unique_set.add(elem)
    unique_list = list(unique_set)
print(unique_list)  

#В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых.
#Не учитывать знаки препинания и регистр символов. За основу возьмите любую статью из википедии или из документации к языку.

text = '''Python (МФА: [ˈpʌɪθ(ə)n]; в русском языке встречаются названия пито́н или па́йтон]) — высокоуровневый язык
программирования общего назначения с динамической строгой типизацией и автоматическим управлением памятью, 
ориентированный на повышение производительности разработчика, читаемости кода и его качества, а также на обеспечение
переносимости написанных на нём программ[27]. Язык является полностью объектно-ориентированным в том плане, что всё является
объектами. Необычной особенностью языка является выделение блоков кода пробельными отступами28. Синтаксис ядра языка
минималистичен, за счёт чего на практике редко возникает необходимость обращаться к документации. Сам же язык известен как
интерпретируемый и используется в том числе для написания скриптов. Недостатками языка являются зачастую более низкая 
скорость работы и более высокое потребление памяти написанных на нём программ по сравнению с аналогичным кодом, написанным 
на компилируемых языках, таких как C или C++.Python является мультипарадигменным языком программирования, поддерживающим
императивное, процедурное, структурное, объектно-ориентированное программирование, метапрограммирование и функциональное
программирование. Задачи обобщённого программирования решаются за счёт динамической типизации. Аспектно-ориентированное
программирование частично поддерживается через декораторы, более полноценная поддержка обеспечивается дополнительными
фреймворками. Такие методики как контрактное и логическое программирование можно реализовать с помощью библиотек или расширений.
Основные архитектурные черты — динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки
исключений, поддержка многопоточных вычислений с глобальной блокировкой интерпретатора (GIL), высокоуровневые структуры данных.
Поддерживается разбиение программ на модули, которые, в свою очередь, могут объединяться в пакеты.Эталонной реализацией
Python является интерпретатор CPython, который поддерживает большинство активно используемых платформ и являющийся стандартом
де-факто языка. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать
его без ограничений в любых приложениях, включая проприетарные. CPython компилирует исходные тексты в высокоуровневый байт-код,
который исполняется в стековой виртуальной машине. К другим трём основным реализациям языка относятся Jython (для JVM),
IronPython (для CLR/.NET) и PyPy. PyPy написан на подмножестве языка Python (RPython) и разрабатывался как альтернатива
CPython с целью повышения скорости исполнения программ, в том числе за счёт использования JIT-компиляции. Поддержка версии
Python 2 закончилась в 2020 году. На текущий момент активно развивается версия языка Python 3. Разработка языка ведётся
через предложения по расширению языка PEP (англ. Python Enhancement Proposal), в которых описываются нововведения, делаются
корректировки согласно обратной связи от сообщества и документируются итоговые решения.Стандартная библиотека включает большой 
набор полезных переносимых функций, начиная с возможностей для работы с текстом и заканчивая
средствами для написания сетевых приложений. Дополнительные возможности, такие как математическое моделирование, работа с 
оборудованием, написание веб-приложений или разработка игр, могут реализовываться посредством обширного количества сторонних 
библиотек, а также интеграцией библиотек, написанных на Си или C++, при этом и сам интерпретатор Python может интегрироваться в проекты, написанные на этих языках[25]. Существует и специализированный репозиторий программного обеспечения, написанного на Python, — PyPI[45]. Данный репозиторий предоставляет средства для простой установки пакетов в операционную систему и стал стандартом де-факто для Python[46]. По состоянию на 2019 год в нём содержалось более 175 тысяч пакетов[45].
Python стал одним из самых популярных языков, он используется в анализе данных, машинном обучении, DevOps и веб-разработке, а 
также в других сферах, включая разработку игр. За счёт читабельности, простого синтаксиса и отсутствия необходимости в компиляции 
язык хорошо подходит для обучения программированию, позволяя концентрироваться на изучении алгоритмов, концептов и парадигм. 
Отладка же и экспериментирование в значительной степени облегчаются тем фактом, что язык является интерпретируемым.Применяется
язык многими крупными компаниями, такими как Google или Facebook. По состоянию на сентябрь 2022 года Python занимает первое
место в рейтинге TIOBE популярности языков программирования с показателем 15,74 %. «Языком года» по версии TIOBE Python
объявлялся в 2007, 2010, 2018, 2020 и 2021 годах.  '''

text = text.lower()# Приводим текст к нижнему регистру
text = text.strip('.,;:!?"()')# Удаляем знаки препинания
words = text.split()# Разбиваем текст на слова
word_counts = {}# Создаем словарь для хранения количества вхождений каждого слова
for word in words:
    if word not in word_counts:
        word_counts[word] = 1     # Считаем количество вхождений каждого слова
    else:
        word_counts[word] += 1
sorted_word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)# Сортируем словарь по значению в порядке убывания
for i in range(10):
    print(sorted_word_counts[i])# Выводим первые 10 элементов списка

#Создайте словарь со списком вещей для похода в качестве ключа и их массой в качестве значения. Определите какие вещи влезут в
#  рюкзак передав его максимальную грузоподъёмность. Достаточно вернуть один допустимый вариант. *Верните все возможные 
# варианты комплектации рюкзака. 

equipment = {"тент": 3,"спальник": 2,"пила": 1,"фонарь": 0.5,"нож": 0.3,"продукты": 5,"одежда": 4,"средства гигиены": 0.5,"палатка": 7}
backpack_size = int(input("Введите вместимость рюкзака: "))
combinations = []

def backpack(equipment: dict[str:int], size: int) -> list[list[str]]:
    pcs, weight = zip(*sorted(equipment.items(), key=lambda x: x[1], reverse=True))
    result, temp, temp_w = [], [], 0
    for index, w in enumerate(weight, 0):
        temp_w += w
        temp.append((pcs[index]))
        for index_n, wn in enumerate(weight[index:], index):
            if wn + temp_w <= size:
                temp_w += wn
                temp.append(pcs[index_n])
        result.append(temp)
        temp, temp_w = [], 0
    return result
[print(i) for i in backpack(equipment, backpack_size)]